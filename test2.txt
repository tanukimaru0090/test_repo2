    // printf関数の型定義
        let printf_type =
            LLVMFunctionType(int_type, [LLVMPointerType(int8_type, 0)].as_mut_ptr(), 1, 1);

        // printf関数の関数定義
        let printf_func = LLVMAddFunction(
            module,
            CString::new("printf").unwrap().as_ptr(),
            printf_type,
        );

        let format_str = CString::new("%d\\0A").unwrap();
        let global_format_str = LLVMAddGlobal(
            module,
            LLVMArrayType(int8_type, format_str.to_bytes_with_nul().len() as u32),
            CString::new("formatStr").unwrap().as_ptr(),
        );
      let format_str = CString::new("%d\\0A").unwrap();
        let global_format_str = LLVMAddGlobal(
            module,
            LLVMArrayType(int8_type, format_str.to_bytes_with_nul().len() as u32),
            CString::new("formatStr").unwrap().as_ptr(),
        );
        LLVMSetInitializer(
            global_format_str,
            LLVMConstStringInContext(
                ctx,
                format_str.as_ptr() as *mut i8,
                format_str.to_bytes_with_nul().len() as u32,
                0,
            ),
        );
        LLVMSetGlobalConstant(global_format_str, 1);
        LLVMSetLinkage(global_format_str, LLVMLinkage::LLVMLinkerPrivateLinkage);

 let zero = LLVMConstInt(int_type, 0, 0);
        let mut indices = [zero, zero];
        let format_str_ptr = LLVMBuildGEP(
            builder,
            global_format_str,
            indices.as_mut_ptr(),
            2,
            CString::new("formatStrPtr").unwrap().as_ptr(),
        );

        // printf関数を呼び出す
        let mut printf_args = [format_str_ptr, add_res];
        let printf_res = LLVMBuildCall(
            builder,
            printf_func,
            printf_args.as_mut_ptr(),
            2,
            CString::new("printfTemp").unwrap().as_ptr(),
        );

